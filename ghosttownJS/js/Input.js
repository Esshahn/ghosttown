// Generated by CoffeeScript 1.10.0

/*
  
  KeyboardController 
  Keyboard input with customisable repeat (set to 0 for no key repeat)
 */
var KeyboardController;

KeyboardController = (function() {
  function KeyboardController() {
    this.timers = {};
  }

  KeyboardController.prototype.destroy = function() {
    var key;
    for (key in this.timers) {
      if (this.timers[key] !== null) {
        clearInterval(this.timers[key]);
      }
    }
    this.timers = {};
  };

  KeyboardController.prototype.init = function(keyset, repeat) {
    this.keyset = keyset;
    this.repeat = repeat;
    this.destroy();
    if (this.keyset === "game") {
      this.keys = {
        37: function() {
          player.set_position(37);
        },
        38: function() {
          player.set_position(38);
        },
        39: function() {
          player.set_position(39);
        },
        40: function() {
          player.set_position(40);
        },
        32: function() {
          room.check_spacebar_event();
        }
      };
    }
    if (this.keyset === "codenumber") {
      this.keys = {
        37: function() {
          room.check_codenumber_keys(37);
        },
        39: function() {
          room.check_codenumber_keys(39);
        },
        32: function() {
          room.check_codenumber_keys(32);
        }
      };
    }
    if (this.keyset === "title") {
      this.keys = {
        32: function() {
          room.check_title_keys();
        },
        49: function() {
          room.check_title_keys();
        }
      };
    }
    if (this.keyset === "win") {
      this.keys = {
        32: function() {
          room.check_win_keys();
        }
      };
    }
    if (this.keyset === "kingsoft") {
      this.keys = {
        65: function() {
          load_menu.step13("de");
        },
        66: function() {
          load_menu.step13("en");
        },
        67: function() {
          load_menu.step12();
        }
      };
    }
    if (this.keyset === "credits") {
      this.keys = {
        32: function() {
          load_menu.step11();
        }
      };
    }
    document.onkeydown = (function(_this) {
      return function(event) {
        var key;
        key = (event || window.event).keyCode;
        if (!(key in _this.keys)) {
          return true;
        }
        if (!(key in _this.timers)) {
          _this.timers[key] = null;
          _this.keys[key]();
          if (_this.repeat !== 0) {
            _this.timers[key] = setInterval(_this.keys[key], _this.repeat);
          }
        }
        return false;
      };
    })(this);
    document.onkeyup = (function(_this) {
      return function(event) {
        var key;
        key = (event || window.event).keyCode;
        if (key in _this.timers) {
          if (_this.timers[key] !== null) {
            clearInterval(_this.timers[key]);
          }
          delete _this.timers[key];
        }
      };
    })(this);
    return window.onblur = function() {
      var key;
      for (key in this.timers) {
        if (this.timers[key] !== null) {
          clearInterval(this.timers[key]);
        }
      }
      this.timers = {};
    };
  };

  return KeyboardController;

})();

//# sourceMappingURL=input.js.map
